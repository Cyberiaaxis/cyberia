{"version":3,"sources":["Avatarlist.js","Avatar.js","serviceWorker.js","index.js"],"names":["Avatarlist","props","className","src","name","alt","work","Avatar","state","this","setState","Avatarlistarray","id","arrayavatarcard","map","avatarcard","i","key","onClick","nameChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAWeA,G,YATI,SAACC,GAChB,OACI,yBAAKC,UAAU,2DACX,yBAAKC,IAAG,sCAAiCF,EAAMG,MAAQC,IAAI,KAC3D,4BAAKJ,EAAMG,MACX,2BAAIH,EAAMK,SCsDPC,E,kDArDX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTJ,KAAM,+BAHD,E,yDAQTK,KAAKC,SAAS,CACVN,KAAM,kC,+BAIL,IAAD,OACEO,EAAkB,CACpB,CACIC,GAAI,EACJR,KAAM,eACNE,KAAM,oBAEV,CACIM,GAAI,EACJR,KAAM,OACNE,KAAM,sBAEV,CACIM,GAAI,EACJR,KAAM,SACNE,KAAM,qBAEV,CACIM,GAAI,EACJR,KAAM,WACNE,KAAM,sBAKRO,EAAkBF,EAAgBG,KAAI,SAACC,EAAYC,GACrD,OAAO,kBAAC,EAAD,CAAYC,IAAKD,EAAGJ,GAAID,EAAgBK,GAAGJ,GAAIR,KAAMO,EAAgBK,GAAGZ,KAAME,KAAMK,EAAgBK,GAAGV,UAGlH,OACI,yBAAKJ,UAAU,YACX,gCAAMO,KAAKD,MAAMJ,KAAjB,KACCS,EAAgB,6BACjB,4BAAQK,QAAW,kBAAK,EAAKC,eAA7B,mB,GAhDKC,a,MCMDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a951f9a6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nconst Avatarlist = (props) => {\r\n    return (\r\n        <div className=\"avtarStyle ma4 bg-light-purple dib pa3 grow shadow-5 tc\" >\r\n            <img src={`https://joeschmoe.io/api/v1/${props.name}`} alt=\"\" />\r\n            <h1>{props.name}</h1>\r\n            <p>{props.work}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Avatarlist;","import React, { Component } from 'react';\r\nimport './Avatar.css';\r\nimport 'tachyons';\r\nimport Avatarlist from './Avatarlist';\r\n\r\n\r\nclass Avatar extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            name: 'Welcome in Developers World'\r\n        }\r\n    }\r\n\r\n    nameChange(){\r\n        this.setState({\r\n            name: 'Developers World is awesome'\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const Avatarlistarray = [\r\n            {\r\n                id: 1,\r\n                name: 'Nitin Sharma',\r\n                work: \"Design Developer\"\r\n            },\r\n            {\r\n                id: 2,\r\n                name: 'Amit',\r\n                work: \"Frontend Developer\"\r\n            },\r\n            {\r\n                id: 3,\r\n                name: 'Laxman',\r\n                work: \"Backend Developer\"\r\n            },\r\n            {\r\n                id: 4,\r\n                name: 'Abhishek',\r\n                work: \"Content Developer\"\r\n            }\r\n\r\n        ]\r\n\r\n        const arrayavatarcard = Avatarlistarray.map((avatarcard, i) => {\r\n            return <Avatarlist key={i} id={Avatarlistarray[i].id} name={Avatarlistarray[i].name} work={Avatarlistarray[i].work} />\r\n        });\r\n        \r\n        return (\r\n            <div className=\"mainPage\">\r\n                <h1> {this.state.name} </h1>\r\n                {arrayavatarcard}<br></br>\r\n                <button onClick = {()=> this.nameChange()}> Subcribe </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Avatar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Avatar from './Avatar';\nimport './index.css';\n// import App from './App';\n// import Demo from './Demo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Avatar/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}