{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useCallback, useState } from \"react\";\nexport default function useFetchApi() {\n  _s();\n\n  const [result, setResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const api = useCallback(async (url, options = {}) => {\n    if (!url) throw new Error('URL required');\n    console.log(url);\n    setLoading(true);\n    options['headers'] = {\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    };\n    await axios(url, options).then(res => {\n      const result = res.data;\n      setResult(result);\n    }).catch(error => {\n      console.log(error.res.data);\n      setError(error.res.data);\n    });\n  }); // Return 'isLoading' not the 'setIsLoading' function\n\n  return {\n    result,\n    loading,\n    error,\n    api\n  };\n}\n\n_s(useFetchApi, \"7hblKi6EehT4KpLqVs1RtcJGlKI=\");\n\n;","map":{"version":3,"sources":["C:/Users/Professional/projects/cyberia/theme/src/components/useFetchApi.js"],"names":["axios","useCallback","useState","useFetchApi","result","setResult","loading","setLoading","error","setError","api","url","options","Error","console","log","Accept","then","res","data","catch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAqBC,QAArB,QAAqC,OAArC;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAClC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMQ,GAAG,GAAGT,WAAW,CAAC,OAAOU,GAAP,EAAYC,OAAO,GAAG,EAAtB,KAA6B;AAEjD,QAAI,CAACD,GAAL,EAAU,MAAM,IAAIE,KAAJ,CAAU,cAAV,CAAN;AAEVC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AAEAJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEAK,IAAAA,OAAO,CAAC,SAAD,CAAP,GAAqB;AACjB,sBAAgB,kBADC;AAEjBI,MAAAA,MAAM,EAAE;AAFS,KAArB;AAKA,UAAMhB,KAAK,CAACW,GAAD,EAAMC,OAAN,CAAL,CACDK,IADC,CACIC,GAAG,IAAI;AACT,YAAMd,MAAM,GAAGc,GAAG,CAACC,IAAnB;AACAd,MAAAA,SAAS,CAACD,MAAD,CAAT;AACH,KAJC,EAKDgB,KALC,CAKKZ,KAAK,IAAI;AACZM,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACU,GAAN,CAAUC,IAAtB;AACAV,MAAAA,QAAQ,CAACD,KAAK,CAACU,GAAN,CAAUC,IAAX,CAAR;AACH,KARC,CAAN;AAUH,GAvBsB,CAAvB,CALkC,CA8BlC;;AACA,SAAO;AAAEf,IAAAA,MAAF;AAAUE,IAAAA,OAAV;AAAmBE,IAAAA,KAAnB;AAA0BE,IAAAA;AAA1B,GAAP;AACH;;GAhCuBP,W;;AAgCvB","sourcesContent":["import axios from \"axios\";\nimport { useCallback,useState } from \"react\";\n\nexport default function useFetchApi() {\n    const [result, setResult] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    const api = useCallback(async (url, options = {}) => {\n\n        if (!url) throw new Error('URL required');\n\n        console.log(url);\n\n        setLoading(true);\n\n        options['headers'] = {\n            'Content-Type': 'application/json',\n            Accept: 'application/json'\n        }\n\n        await axios(url, options)\n            .then(res => {\n                const result = res.data;\n                setResult(result);\n            })\n            .catch(error => {\n                console.log(error.res.data)\n                setError(error.res.data);\n            });\n\n    });\n\n    // Return 'isLoading' not the 'setIsLoading' function\n    return { result, loading, error, api };\n};\n"]},"metadata":{},"sourceType":"module"}